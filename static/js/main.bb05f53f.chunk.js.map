{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","hooks/useFilteredTodos.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","todosReducer","todos","Array","isArray","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","useMemo","isQueryMatched","title","toLowerCase","includes","completed","useFilteredTodos","length","className","map","cn","id","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","errorMessage","setErrorMessage","user","setUser","useEffect","userId","loadedUser","catch","error","finally","href","email","name","App","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb05f53f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status,\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\ntype FilterState = {\n  query: string,\n  status: Status\n};\n\nexport const actions = {\n  setQuery: (payload: string): SetQueryAction => ({\n    type: 'filter/SET_QUERY',\n    payload,\n  }),\n  setStatus: (payload: Status): SetStatusAction => ({\n    type: 'filter/SET_STATUS',\n    payload,\n  }),\n};\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'todos/ADD', payload: Todo | Todo[] };\n\ntype Action = AddAction;\n\nexport const actions = {\n  add: (payload: Todo | Todo[]): AddAction => ({ type: 'todos/ADD', payload }),\n};\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD': {\n      if (Array.isArray(action.payload)) {\n        return [...todos, ...action.payload];\n      }\n\n      return [...todos, action.payload];\n    }\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport cn from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useFilteredTodos } from '../../hooks/useFilteredTodos';\n\nexport const TodoList: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const visibleTodos = useFilteredTodos();\n\n  return (\n    <>\n      {(visibleTodos.length === 0) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {(visibleTodos.length > 0) && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr\n                key={todo.id}\n                data-cy=\"todo\"\n                className={cn({ 'has-background-info-light': currentTodo?.id === todo.id })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={cn(\n                      { 'has-text-danger': !todo.completed },\n                      { 'has-text-success': todo.completed },\n                    )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn(\n                          'far',\n                          { 'fa-eye': currentTodo?.id !== todo.id },\n                          { 'fa-eye-slash': currentTodo?.id === todo.id },\n                        )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { useAppSelector } from '../app/hooks';\n\nexport const useFilteredTodos = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  return useMemo(() => {\n    return todos.filter(todo => {\n      const isQueryMatched = todo.title.toLowerCase()\n        .includes(query.toLowerCase());\n\n      switch (status) {\n        case 'active':\n          return isQueryMatched && !todo.completed;\n\n        case 'completed':\n          return isQueryMatched && todo.completed;\n\n        case 'all':\n        default:\n          return isQueryMatched;\n      }\n    });\n  }, [todos, query, status]);\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => {\n              dispatch(filterActions.setStatus(event.target.value as Status));\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            dispatch(filterActions.setQuery(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(currentTodo?.userId ?? 0)\n      .then(loadedUser => setUser(loadedUser))\n      .catch(error => setErrorMessage(error.errorMessage))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${currentTodo?.id}`}\n          </div>\n\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={() => dispatch(currentTodoActions.removeTodo())}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {currentTodo?.completed\n              ? <strong className=\"has-text-success\">Done</strong>\n              : <strong className=\"has-text-danger\">Planned</strong>}\n            {' by '}\n            {user && <a href={`mailto:${user.email}`}>{user.name}</a>}\n            {errorMessage && <p>{errorMessage}</p>}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(loadedTodos => dispatch(todosActions.add(loadedTodos)))\n      .catch(error => setErrorMessage(error.errorMessage))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {errorMessage && <p>{errorMessage}</p>}\n              {isLoading && <Loader />}\n              {todos.length > 0 && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}